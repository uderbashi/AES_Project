import java.util.HexFormat;

public class AESMatrix {
	private byte[] matrix;

	/*
	** Constants
	*/
	private static final byte[] SBOX = {
		(byte)0x63, (byte)0x7c, (byte)0x77, (byte)0x7b, (byte)0xf2, (byte)0x6b, (byte)0x6f, (byte)0xc5, (byte)0x30, (byte)0x01, (byte)0x67, (byte)0x2b, (byte)0xfe, (byte)0xd7, (byte)0xab, (byte)0x76,
		(byte)0xca, (byte)0x82, (byte)0xc9, (byte)0x7d, (byte)0xfa, (byte)0x59, (byte)0x47, (byte)0xf0, (byte)0xad, (byte)0xd4, (byte)0xa2, (byte)0xaf, (byte)0x9c, (byte)0xa4, (byte)0x72, (byte)0xc0,
		(byte)0xb7, (byte)0xfd, (byte)0x93, (byte)0x26, (byte)0x36, (byte)0x3f, (byte)0xf7, (byte)0xcc, (byte)0x34, (byte)0xa5, (byte)0xe5, (byte)0xf1, (byte)0x71, (byte)0xd8, (byte)0x31, (byte)0x15,
		(byte)0x04, (byte)0xc7, (byte)0x23, (byte)0xc3, (byte)0x18, (byte)0x96, (byte)0x05, (byte)0x9a, (byte)0x07, (byte)0x12, (byte)0x80, (byte)0xe2, (byte)0xeb, (byte)0x27, (byte)0xb2, (byte)0x75,
		(byte)0x09, (byte)0x83, (byte)0x2c, (byte)0x1a, (byte)0x1b, (byte)0x6e, (byte)0x5a, (byte)0xa0, (byte)0x52, (byte)0x3b, (byte)0xd6, (byte)0xb3, (byte)0x29, (byte)0xe3, (byte)0x2f, (byte)0x84,
		(byte)0x53, (byte)0xd1, (byte)0x00, (byte)0xed, (byte)0x20, (byte)0xfc, (byte)0xb1, (byte)0x5b, (byte)0x6a, (byte)0xcb, (byte)0xbe, (byte)0x39, (byte)0x4a, (byte)0x4c, (byte)0x58, (byte)0xcf,
		(byte)0xd0, (byte)0xef, (byte)0xaa, (byte)0xfb, (byte)0x43, (byte)0x4d, (byte)0x33, (byte)0x85, (byte)0x45, (byte)0xf9, (byte)0x02, (byte)0x7f, (byte)0x50, (byte)0x3c, (byte)0x9f, (byte)0xa8,
		(byte)0x51, (byte)0xa3, (byte)0x40, (byte)0x8f, (byte)0x92, (byte)0x9d, (byte)0x38, (byte)0xf5, (byte)0xbc, (byte)0xb6, (byte)0xda, (byte)0x21, (byte)0x10, (byte)0xff, (byte)0xf3, (byte)0xd2,
		(byte)0xcd, (byte)0x0c, (byte)0x13, (byte)0xec, (byte)0x5f, (byte)0x97, (byte)0x44, (byte)0x17, (byte)0xc4, (byte)0xa7, (byte)0x7e, (byte)0x3d, (byte)0x64, (byte)0x5d, (byte)0x19, (byte)0x73,
		(byte)0x60, (byte)0x81, (byte)0x4f, (byte)0xdc, (byte)0x22, (byte)0x2a, (byte)0x90, (byte)0x88, (byte)0x46, (byte)0xee, (byte)0xb8, (byte)0x14, (byte)0xde, (byte)0x5e, (byte)0x0b, (byte)0xdb,
		(byte)0xe0, (byte)0x32, (byte)0x3a, (byte)0x0a, (byte)0x49, (byte)0x06, (byte)0x24, (byte)0x5c, (byte)0xc2, (byte)0xd3, (byte)0xac, (byte)0x62, (byte)0x91, (byte)0x95, (byte)0xe4, (byte)0x79,
		(byte)0xe7, (byte)0xc8, (byte)0x37, (byte)0x6d, (byte)0x8d, (byte)0xd5, (byte)0x4e, (byte)0xa9, (byte)0x6c, (byte)0x56, (byte)0xf4, (byte)0xea, (byte)0x65, (byte)0x7a, (byte)0xae, (byte)0x08,
		(byte)0xba, (byte)0x78, (byte)0x25, (byte)0x2e, (byte)0x1c, (byte)0xa6, (byte)0xb4, (byte)0xc6, (byte)0xe8, (byte)0xdd, (byte)0x74, (byte)0x1f, (byte)0x4b, (byte)0xbd, (byte)0x8b, (byte)0x8a,
		(byte)0x70, (byte)0x3e, (byte)0xb5, (byte)0x66, (byte)0x48, (byte)0x03, (byte)0xf6, (byte)0x0e, (byte)0x61, (byte)0x35, (byte)0x57, (byte)0xb9, (byte)0x86, (byte)0xc1, (byte)0x1d, (byte)0x9e,
		(byte)0xe1, (byte)0xf8, (byte)0x98, (byte)0x11, (byte)0x69, (byte)0xd9, (byte)0x8e, (byte)0x94, (byte)0x9b, (byte)0x1e, (byte)0x87, (byte)0xe9, (byte)0xce, (byte)0x55, (byte)0x28, (byte)0xdf,
		(byte)0x8c, (byte)0xa1, (byte)0x89, (byte)0x0d, (byte)0xbf, (byte)0xe6, (byte)0x42, (byte)0x68, (byte)0x41, (byte)0x99, (byte)0x2d, (byte)0x0f, (byte)0xb0, (byte)0x54, (byte)0xbb, (byte)0x16
	};

	private static final byte[] RSBOX = {
		(byte)0x52, (byte)0x09, (byte)0x6a, (byte)0xd5, (byte)0x30, (byte)0x36, (byte)0xa5, (byte)0x38, (byte)0xbf, (byte)0x40, (byte)0xa3, (byte)0x9e, (byte)0x81, (byte)0xf3, (byte)0xd7, (byte)0xfb,
		(byte)0x7c, (byte)0xe3, (byte)0x39, (byte)0x82, (byte)0x9b, (byte)0x2f, (byte)0xff, (byte)0x87, (byte)0x34, (byte)0x8e, (byte)0x43, (byte)0x44, (byte)0xc4, (byte)0xde, (byte)0xe9, (byte)0xcb,
		(byte)0x54, (byte)0x7b, (byte)0x94, (byte)0x32, (byte)0xa6, (byte)0xc2, (byte)0x23, (byte)0x3d, (byte)0xee, (byte)0x4c, (byte)0x95, (byte)0x0b, (byte)0x42, (byte)0xfa, (byte)0xc3, (byte)0x4e,
		(byte)0x08, (byte)0x2e, (byte)0xa1, (byte)0x66, (byte)0x28, (byte)0xd9, (byte)0x24, (byte)0xb2, (byte)0x76, (byte)0x5b, (byte)0xa2, (byte)0x49, (byte)0x6d, (byte)0x8b, (byte)0xd1, (byte)0x25,
		(byte)0x72, (byte)0xf8, (byte)0xf6, (byte)0x64, (byte)0x86, (byte)0x68, (byte)0x98, (byte)0x16, (byte)0xd4, (byte)0xa4, (byte)0x5c, (byte)0xcc, (byte)0x5d, (byte)0x65, (byte)0xb6, (byte)0x92,
		(byte)0x6c, (byte)0x70, (byte)0x48, (byte)0x50, (byte)0xfd, (byte)0xed, (byte)0xb9, (byte)0xda, (byte)0x5e, (byte)0x15, (byte)0x46, (byte)0x57, (byte)0xa7, (byte)0x8d, (byte)0x9d, (byte)0x84,
		(byte)0x90, (byte)0xd8, (byte)0xab, (byte)0x00, (byte)0x8c, (byte)0xbc, (byte)0xd3, (byte)0x0a, (byte)0xf7, (byte)0xe4, (byte)0x58, (byte)0x05, (byte)0xb8, (byte)0xb3, (byte)0x45, (byte)0x06,
		(byte)0xd0, (byte)0x2c, (byte)0x1e, (byte)0x8f, (byte)0xca, (byte)0x3f, (byte)0x0f, (byte)0x02, (byte)0xc1, (byte)0xaf, (byte)0xbd, (byte)0x03, (byte)0x01, (byte)0x13, (byte)0x8a, (byte)0x6b,
		(byte)0x3a, (byte)0x91, (byte)0x11, (byte)0x41, (byte)0x4f, (byte)0x67, (byte)0xdc, (byte)0xea, (byte)0x97, (byte)0xf2, (byte)0xcf, (byte)0xce, (byte)0xf0, (byte)0xb4, (byte)0xe6, (byte)0x73,
		(byte)0x96, (byte)0xac, (byte)0x74, (byte)0x22, (byte)0xe7, (byte)0xad, (byte)0x35, (byte)0x85, (byte)0xe2, (byte)0xf9, (byte)0x37, (byte)0xe8, (byte)0x1c, (byte)0x75, (byte)0xdf, (byte)0x6e,
		(byte)0x47, (byte)0xf1, (byte)0x1a, (byte)0x71, (byte)0x1d, (byte)0x29, (byte)0xc5, (byte)0x89, (byte)0x6f, (byte)0xb7, (byte)0x62, (byte)0x0e, (byte)0xaa, (byte)0x18, (byte)0xbe, (byte)0x1b,
		(byte)0xfc, (byte)0x56, (byte)0x3e, (byte)0x4b, (byte)0xc6, (byte)0xd2, (byte)0x79, (byte)0x20, (byte)0x9a, (byte)0xdb, (byte)0xc0, (byte)0xfe, (byte)0x78, (byte)0xcd, (byte)0x5a, (byte)0xf4,
		(byte)0x1f, (byte)0xdd, (byte)0xa8, (byte)0x33, (byte)0x88, (byte)0x07, (byte)0xc7, (byte)0x31, (byte)0xb1, (byte)0x12, (byte)0x10, (byte)0x59, (byte)0x27, (byte)0x80, (byte)0xec, (byte)0x5f,
		(byte)0x60, (byte)0x51, (byte)0x7f, (byte)0xa9, (byte)0x19, (byte)0xb5, (byte)0x4a, (byte)0x0d, (byte)0x2d, (byte)0xe5, (byte)0x7a, (byte)0x9f, (byte)0x93, (byte)0xc9, (byte)0x9c, (byte)0xef,
		(byte)0xa0, (byte)0xe0, (byte)0x3b, (byte)0x4d, (byte)0xae, (byte)0x2a, (byte)0xf5, (byte)0xb0, (byte)0xc8, (byte)0xeb, (byte)0xbb, (byte)0x3c, (byte)0x83, (byte)0x53, (byte)0x99, (byte)0x61,
		(byte)0x17, (byte)0x2b, (byte)0x04, (byte)0x7e, (byte)0xba, (byte)0x77, (byte)0xd6, (byte)0x26, (byte)0xe1, (byte)0x69, (byte)0x14, (byte)0x63, (byte)0x55, (byte)0x21, (byte)0x0c, (byte)0x7d
	};

	/*
	** Constructors and toString
	*/

	public AESMatrix() {
		matrix = new byte[16];
	}

	public AESMatrix(byte[] old) {
		matrix = new byte[16];
		if(old == null || old.length != 16) {
			System.err.println("ERROR: Matrix length incompatible, matrix zeroes");
		} else {
			System.arraycopy(old, 0, matrix, 0, 16);
		}
	}

	public AESMatrix(AESMatrix old) {
		matrix = new byte[16];
		System.arraycopy(old.matrix, 0, matrix, 0, 16);
	}

	@Override
    public String toString() {
        String out = "\n===============\n";
        for(int i = 0; i < 4; i++) {
			out += "| ";
			for(int j = 0; j < 4; j++) {
				out += HexFormat.of().toHexDigits(matrix[j*4+i]) + " ";
			}
			out += "|\n";
		}

		out += "===============\n";

        return out;
    }

    byte get(int n) {// package visibility
		return matrix[n];
	}

    /*
    ** Sub bytes
    */

	private static void subByteArrWith(byte[] arr, byte[] box) {
		for(int i = 0; i < arr.length; i++) {
			int pos = Byte.toUnsignedInt(arr[i]);
			arr[i] = box[pos];
		}
	}

	public static void subByteArr(byte[] arr) {
		subByteArrWith(arr, SBOX);
	}

	public static void rsubByteArr(byte[] arr) {
		subByteArrWith(arr, RSBOX);
	}

	public void subBytes() {
		subByteArr(matrix);
	}

	public void rsubBytes() {
		rsubByteArr(matrix);
	}

	/*
	** Shift rows
	*/
	private void shiftRow(int rowN, int offset) {
		byte[] newRow = new byte[4];

		for(int i = 0; i < 4; ++i) {
			newRow[i] =  matrix[4 * ((i + offset) % 4) + rowN];
		}

		for(int i = 0; i < 4; ++i) {
			matrix[4 * i + rowN] = newRow[i];
		}
	}

	public void shiftRows() {
		int i;
		for(i = 1; i < 4; ++i) {
			shiftRow(i, i);
		}
	}

	public void rshiftRows() {
		int i;
		for(i = 1; i < 4; ++i) {
			shiftRow(i, 4 - i);
		}
	}

	/*
	** Mix columnss (The Design of Rijndael - Sec 4.1)
	*/
	private byte xtime(byte n) {
		if((n & (byte)0x80) != 0) {
			return (byte)((n << 1) ^ 0x1B);
		}
		return (byte)(n << 1);
	}

	private byte xtime(int n) {
		return xtime((byte)n);
	}

	private void mixColumn(byte[] col, int offset) {
		byte t = (byte)(col[0 + offset] ^ col[1 + offset] ^ col[2 + offset] ^ col[3 + offset]);
		byte u = col[0 + offset];
		col[0 + offset] ^= t ^ xtime(col[0 + offset] ^ col[1 + offset]);
		col[1 + offset] ^= t ^ xtime(col[1 + offset] ^ col[2 + offset]);
		col[2 + offset] ^= t ^ xtime(col[2 + offset] ^ col[3 + offset]);
		col[3 + offset] ^= t ^ xtime(col[3 + offset] ^ u);
	}

	private void rmixColumn(byte[] col, int offset) {
		byte u = xtime(xtime(col[0 + offset] ^ col[2 + offset]));
		byte v = xtime(xtime(col[1 + offset] ^ col[3 + offset]));
		col[0 + offset] = (byte)(col[0 + offset] ^ u);
		col[1 + offset] = (byte)(col[1 + offset] ^ v);
		col[2 + offset] = (byte)(col[2 + offset] ^ u);
		col[3 + offset] = (byte)(col[3 + offset] ^ v);
	}

	public void mixColumns() {
		int i;
		for(i = 0; i < 4; ++i) {
			mixColumn(matrix, 4 * i);
		}
	}

	public void rmixColumns() {
		int i;
		for(i = 0; i < 4; ++i) {
			rmixColumn(matrix, 4 * i);
			mixColumn(matrix, 4 * i);
		}
	}

	/*
	** XOR and util
	*/
	public void xorMatrix(byte[] other) {
		if(other.length != 16) {
			System.err.println("ERROR: Matrix length incompatible, matrix doesnt xor");
			return;
		}
		for(int i = 0; i < 16; i++) {
			matrix[i] ^= other[i];
		}
	}

	public void xorMatrix(AESMatrix other) {
		xorMatrix(other.matrix);
	}

	public void addRoundKey(AESMatrix roundKey) {
		xorMatrix(roundKey);
	}
}
